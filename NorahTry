
import java.util.*;

class Process {
    int PID;
    int arrivalTime;
    int burstTime;
    int startTime = -1;
    int endTime = -1;
    int leftTime;

    public Process(int PID, int arrivalTime, int burstTime) {
        this.PID = PID;
        this.arrivalTime = arrivalTime;
        this.burstTime = burstTime;
        this.leftTime = burstTime;
    }
}

class Event implements Comparable<Event> {
    int time;
    String type; // "ARRIVAL", "EXECUTION", "CS"
    Process process;

    public Event(int time, String type, Process process) {
        this.time = time;
        this.type = type;
        this.process = process;
    }

    public int compareTo(Event other) {
        return Integer.compare(this.time, other.time); // Ensures events are processed in time order
    }
}

public class Scheduling {
    List<Process> processList = new ArrayList<>();
    PriorityQueue<Event> eventQueue = new PriorityQueue<>();
    PriorityQueue<Process> readyQueue = new PriorityQueue<>(Comparator.comparingInt(p -> p.leftTime));
    int contextSwitchTime = 1;
    int currentTime = 0;
    int idleTime = 0;

    void runScheduler() {
        // Initialize events with process arrivals
        for (Process p : processList) {
            eventQueue.add(new Event(p.arrivalTime, "ARRIVAL", p));
        }

        int prevPID = -1;
        int totalWaitingTime = 0;
        int totalTurnaroundTime = 0;
        int completed = 0;
        List<String> scheduleLog = new ArrayList<>();

        while (!eventQueue.isEmpty()) {
            Event currentEvent = eventQueue.poll();
            currentTime = currentEvent.time;

            switch (currentEvent.type) {
                case "ARRIVAL":
                    readyQueue.add(currentEvent.process);
                    if (readyQueue.size() == 1) {
                        eventQueue.add(new Event(currentTime, "EXECUTION", currentEvent.process));
                    }
                    break;

                case "EXECUTION":
                    if (!readyQueue.isEmpty()) {
                        Process currentProcess = readyQueue.poll();

                        // Handle context switch
                        if (prevPID != -1 && prevPID != currentProcess.PID) {
                            eventQueue.add(new Event(currentTime + contextSwitchTime, "CS", null));
                            scheduleLog.add(currentTime + "-" + (currentTime + contextSwitchTime) + " CS");
                            currentTime += contextSwitchTime;
                        }

                        scheduleLog.add(currentTime + "-" + (currentTime + 1) + " P" + currentProcess.PID);
                        currentProcess.leftTime--;
                        prevPID = currentProcess.PID;

                        if (currentProcess.leftTime == 0) {
                            currentProcess.endTime = currentTime + 1;
                            int turnaroundTime = currentProcess.endTime - currentProcess.arrivalTime;
                            int waitingTime = turnaroundTime - currentProcess.burstTime;

                            totalTurnaroundTime += turnaroundTime;
                            totalWaitingTime += waitingTime;
                            completed++;
                        } else {
                            readyQueue.add(currentProcess); // Reinsert process with updated leftTime
                        }

                        if (!readyQueue.isEmpty()) {
                            eventQueue.add(new Event(currentTime + 1, "EXECUTION", readyQueue.peek()));
                        }
                    } else {
                        idleTime++;
                    }
                    break;

                case "CS":
                    // Context switch is completed, resume execution
                    if (!readyQueue.isEmpty()) {
                        eventQueue.add(new Event(currentTime, "EXECUTION", readyQueue.peek()));
                    }
                    break;
            }
        }

        // Print scheduling log
        System.out.println("Time  | Process/CS");

        for (String log : scheduleLog) {
            System.out.println(log);
        }

        // Performance Metrics
        double avgWaitingTime = (double) totalWaitingTime / processList.size();
        double avgTurnaroundTime = (double) totalTurnaroundTime / processList.size();
        double cpuUtilization = ((double) (currentTime - idleTime) / currentTime) * 100;

        System.out.println("\nPerformance Metrics:");
        System.out.println("Average Turnaround Time: " + avgTurnaroundTime);
        System.out.println("Average Waiting Time: " + avgWaitingTime);
        System.out.println("CPU Utilization: " + String.format("%.2f", cpuUtilization) + "%");
    }

    public static void main(String[] args) {
        Scanner scan = new Scanner(System.in);
        Scheduling scheduler = new Scheduling();

        System.out.println("Enter the number of processes:");
        int nProcesses = scan.nextInt();

        System.out.println("Enter Arrival and Burst time for each process:");
        for (int i = 0; i < nProcesses; i++) {
            System.out.print("P" + (i + 1) + " Arrival Time: ");
            int arrivalTime = scan.nextInt();
            System.out.print("P" + (i + 1) + " Burst Time: ");
            int burstTime = scan.nextInt();

            scheduler.processList.add(new Process(i + 1, arrivalTime, burstTime));
        }

        scheduler.runScheduler();
        scan.close();
    }
}
